优点
计算复杂度并不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关特征数据

缺点
可能会产生过度匹配的问题



函数分析
calcShannonEnt()
计算输入的参数的信息熵

createDataSet()
生成测试数据

splitDataSet()
生成子数据集
子数据为值为选中目标特征的参数的集合，并且去除了用于分类的那个特征

chooseBestFeatureToSplit()
选择信息熵增益最大的特征对原数据进行分类
对数据集中每个特征进行计算，选择熵增益最大的特征作为分类特征

majorityCnt()
获取数据集中主要分类

createTree()
树生成算法
如果各个数据的分类一致，返回一致的分类标签
如果各个数据的分类不一致，返回主要的分类标签
首先对树根进行最优分类，之后对获得的各个子节点递归进行树生成操作